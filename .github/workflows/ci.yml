name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; else pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        flake8 api --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 api --count --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check imports with isort
      run: |
        isort --check-only --profile black api
    
    - name: Format check with black
      run: |
        black --check api
    
    - name: Type check with mypy
      run: |
        mypy api
    
    - name: Test with pytest
      run: |
        pytest --cov=api api/tests/

  docker-build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build and tag Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: fastapi-xtrem:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run bandit security scan
      run: |
        bandit -r api/ -x api/tests/
    
    - name: Check for vulnerable dependencies
      run: |
        safety check -r requirements.txt

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Placeholder deploy step
      run: |
        echo "Deployment to staging would happen here in a real project"
        echo "This could involve pushing to a container registry and deploying to a staging environment" 